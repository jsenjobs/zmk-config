/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    // behaviors {
    // DFU AOT
    //     bootloader: behavior_reset_dfu {
    //         compatible = "zmk,behavior-reset";
    //         label = "BOOTLOAD";
    //         type = <0xA8>;
    //         #binding-cells = <0>;
    //     };
    // };

    combos {
        compatible = "zmk,combos";

        l_reset {
            bindings = <&sys_reset>;
            key-positions = <0 1 5>;
        };

        r_reset {
            bindings = <&sys_reset>;
            key-positions = <11 10 6>;
        };

        l_boot {
            bindings = <&bootloader>;
            key-positions = <0 1 17>;
        };

        r_boot {
            bindings = <&bootloader>;
            key-positions = <11 10 18>;
        };

        l_alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <16 37>;
        };

        l_s_alt {
            bindings = <&kp LS(LEFT_ALT)>;
            key-positions = <15 37>;
        };

        l_ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <14 37>;
        };

        l_ctrl_a {
            bindings = <&kp LC(A)>;
            key-positions = <13 37>;
        };

        r_alt {
            bindings = <&kp RALT>;
            key-positions = <19 40>;
        };

        r_s_alt {
            bindings = <&kp RS(RIGHT_ALT)>;
            key-positions = <40 20>;
        };

        r_ctrl {
            bindings = <&kp RCTRL>;
            key-positions = <21 40>;
        };

        r_ctrl_alt {
            bindings = <&kp RA(RCTRL)>;
            key-positions = <22 40>;
        };

        left_conf {
            bindings = <&tog 6>;
            key-positions = <1 0 38>;
        };

        right_conf {
            bindings = <&tog 7>;
            key-positions = <10 11 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T      &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G      &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B      &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &kp LGUI  &mo 4  &kp SPACE  &kp RET  &mo 3  &kp RCTRL
            >;
        };

        colemak {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp F     &kp P  &kp G      &kp J    &kp L  &kp U      &kp Y    &kp SEMI  &kp BSPC
&kp LCTRL  &kp A  &kp R  &kp S     &kp T  &kp D      &kp H    &kp N  &kp E      &kp I    &kp O     &kp APOS
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B      &kp K    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &kp LGUI  &mo 4  &kp SPACE  &kp RET  &mo 3  &kp RCTRL
            >;
        };

        dvorak {
            bindings = <
&kp TAB    &kp APOS  &kp COMMA  &kp DOT   &kp P  &kp Y      &kp F    &kp G  &kp C      &kp R  &kp L  &kp BSPC
&kp LCTRL  &kp A     &kp O      &kp E     &kp U  &kp I      &kp D    &kp H  &kp T      &kp N  &kp S  &kp FSLH
&kp LSHFT  &kp SEMI  &kp Q      &kp J     &kp K  &kp X      &kp B    &kp M  &kp W      &kp V  &kp Z  &kp RSHFT
                                &kp LGUI  &mo 4  &kp SPACE  &kp RET  &mo 3  &kp RCTRL
            >;
        };

        lower_layer {
            bindings = <
&kp CAPS   &kp N1  &kp N2  &kp N3    &kp N4         &kp N5     &kp N6    &kp N7    &kp N8     &kp N9     &kp N0  &kp BSPC
&kp LCTRL  &trans  &trans  &trans    &kp LC(SPACE)  &trans     &kp LEFT  &kp DOWN  &kp UP     &kp RIGHT  &trans  &trans
&kp LSHFT  &trans  &trans  &trans    &trans         &trans     &trans    &trans    &trans     &trans     &trans  &trans
                           &kp LGUI  &trans         &kp SPACE  &kp RET   &trans    &kp RCTRL
            >;
        };

        raise_layer {
            bindings = <
&kp TAB    &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &kp LS(LPAR)        &kp LS(RPAR)       &kp ESC
&kp LCTRL  &trans        &trans      &trans         &trans        &trans         &kp GRAVE      &kp MINUS      &kp EQUAL     &kp LBKT            &kp RIGHT_BRACKET  &kp BSLH
&kp LSHFT  &trans        &trans      &trans         &trans        &trans         &kp LS(TILDE)  &kp LS(UNDER)  &kp LS(PLUS)  &kp LS(LEFT_BRACE)  &kp LS(RBRC)       &kp LS(PIPE)
                                     &kp LGUI       &trans        &kp SPACE      &kp RET        &trans         &kp RCTRL
            >;
        };

        adjust {
            bindings = <
&kp TAB       &kp F1        &kp F2        &kp F3        &kp F4        &kp F5      &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_NXT  &trans  &trans  &trans  &trans  &trans   &kp F12
&tog 0        &tog 1        &tog 2        &trans        &trans        &trans      &trans  &trans  &trans  &trans  &trans   &trans
                                          &trans        &trans        &trans      &trans  &trans  &trans
            >;
        };

        left_conf {
            bindings = <
&sys_reset         &bt BT_CLR  &tog 1  &tog 2  &tog 8      &tog 9      &none  &none  &none  &none  &none  &none
&bootloader        &none       &none   &none   &bt BT_PRV  &bt BT_NXT  &none  &none  &none  &none  &none  &none
&ext_power EP_TOG  &none       &none   &none   &none       &none       &none  &none  &none  &none  &none  &none
                                       &none   &none       &none       &none  &none  &none
            >;
        };

        right_conf {
            bindings = <
&none  &none  &none  &none  &none  &none  &tog 9      &tog 8      &tog 2  &tog 1  &bt BT_CLR  &sys_reset
&none  &none  &none  &none  &none  &none  &bt BT_NXT  &bt BT_PRV  &none   &none   &none       &bootloader
&none  &none  &none  &none  &none  &none  &none       &none       &none   &none   &none       &ext_power EP_TOG
                     &none  &none  &none  &none       &none       &none
            >;
        };

        test_key {
            bindings = <
&kp N1    &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp MINUS  &kp EQUAL
&kp Q     &kp W   &kp E   &kp R   &kp T   &kp Y   &kp U   &kp I   &kp O   &kp P   &kp LBKT   &kp LBRC
&kp BSLH  &kp A   &kp S   &kp D   &kp F   &kp G   &kp H   &kp J   &kp K   &kp L   &kp SEMI   &kp SQT
                          &kp Z   &kp X   &kp C   &kp V   &kp B   &kp N
            >;
        };

        check_func {
            bindings = <
&kp D  &kp E         &kp F         &kp G              &kp H         &kp I       &kp I       &kp H         &kp G              &kp F         &kp E         &kp D
&kp C  &bootloader   &sys_reset    &ext_power EP_TOG  &kp F         &bt BT_CLR  &bt BT_CLR  &kp J         &ext_power EP_TOG  &sys_reset    &bootloader   &kp C
&kp B  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3       &bt BT_SEL 4  &bt BT_NXT  &bt BT_NXT  &bt BT_SEL 4  &bt BT_SEL 3       &bt BT_SEL 2  &bt BT_SEL 1  &kp B
                                   &kp A              &kp N1        &kp N2      &kp N3      &kp N4        &kp A
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        media_active {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };
};
