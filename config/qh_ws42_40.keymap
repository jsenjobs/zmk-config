/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        l_reset {
            bindings = <&sys_reset>;
            key-positions = <0 1 5>;
        };

        r_reset {
            bindings = <&sys_reset>;
            key-positions = <11 10 6>;
        };

        l_boot {
            bindings = <&bootloader>;
            key-positions = <0 1 17>;
        };

        r_boot {
            bindings = <&bootloader>;
            key-positions = <11 10 18>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        test_layer {
            bindings = <
&kp D  &kp E         &kp F         &kp G              &kp H         &kp I       &kp I       &kp H         &kp G              &kp F         &kp E         &kp D
&kp C  &bootloader   &sys_reset    &ext_power EP_TOG  &kp F         &bt BT_CLR  &bt BT_CLR  &kp J         &ext_power EP_TOG  &sys_reset    &bootloader   &kp C
&kp B  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3       &bt BT_SEL 4  &bt BT_NXT  &bt BT_NXT  &bt BT_SEL 4  &bt BT_SEL 3       &bt BT_SEL 2  &bt BT_SEL 1  &kp B
                                   &kp A              &kp N1        &kp N2      &kp N3      &kp N4        &kp A
            >;
        };

        default {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R   &kp T      &kp Y    &kp U   &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F   &kp G      &kp H    &kp J   &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V   &kp B      &kp N    &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &kp LGUI  &trans  &kp SPACE  &kp RET  &trans  &kp RCTRL
            >;
        };

        colemak {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp F     &kp P   &kp G      &kp J    &kp L   &kp U      &kp Y    &kp SEMI  &kp BSPC
&kp LCTRL  &kp A  &kp R  &kp S     &kp T   &kp D      &kp H    &kp N   &kp E      &kp I    &kp O     &kp APOS
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V   &kp B      &kp K    &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &kp LGUI  &trans  &kp SPACE  &kp RET  &trans  &kp RCTRL
            >;
        };

        dvorak {
            bindings = <
&kp TAB    &kp APOS  &kp COMMA  &kp DOT   &kp P   &kp Y      &kp F    &kp G   &kp C      &kp R  &kp L  &kp BSPC
&kp LCTRL  &kp A     &kp O      &kp E     &kp U   &kp I      &kp D    &kp H   &kp T      &kp N  &kp S  &kp FSLH
&kp LSHFT  &kp SEMI  &kp Q      &kp J     &kp K   &kp X      &kp B    &kp M   &kp W      &kp V  &kp Z  &kp RSHFT
                                &kp LGUI  &trans  &kp SPACE  &kp RET  &trans  &kp RCTRL
            >;
        };

        number {
            bindings = <
&kp CAPS   &kp N1  &kp N2  &kp N3    &kp N4  &kp N5     &kp N6    &kp N7    &kp N8     &kp N9     &kp N0  &kp BSPC
&kp LCTRL  &trans  &trans  &trans    &trans  &trans     &kp LEFT  &kp DOWN  &kp UP     &kp RIGHT  &trans  &trans
&kp LSHFT  &trans  &trans  &trans    &trans  &trans     &trans    &trans    &trans     &trans     &trans  &trans
                           &kp LGUI  &trans  &kp SPACE  &kp RET   &trans    &kp RCTRL
            >;
        };

        func {
            bindings = <
&kp TAB    &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &kp ESC
&kp LCTRL  &trans        &trans      &trans         &trans        &trans         &kp GRAVE      &kp MINUS      &kp EQUAL     &kp LBKT      &kp LBRC      &kp BSLH
&kp LSHFT  &trans        &trans      &trans         &trans        &trans         &kp LS(TILDE)  &kp LS(UNDER)  &kp LS(PLUS)  &kp LS(RBKT)  &kp LS(RBRC)  &kp LS(PIPE)
                                     &kp LGUI       &trans        &kp SPACE      &kp RET        &trans         &kp RCTRL
            >;
        };
    };
};
